name: Build native libraries

on:
  workflow_dispatch:

jobs:
  build-macos:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create output directories
        run: |
          mkdir -p Usb.Events/x64/GitHub
          mkdir -p Usb.Events/arm64/GitHub

      - name: Compile the .c file to .dylib for ARM-based macOS
        run: |
          cd Usb.Events
          gcc -arch arm64 -shared ./Mac/UsbEventWatcher.Mac.c -o arm64/GitHub/UsbEventWatcher.Mac.dylib -framework CoreFoundation -framework DiskArbitration -framework IOKit

      - name: Compile the .c file to .dylib for Intel-based macOS
        run: |
          cd Usb.Events
          gcc -arch x86_64 -shared ./Mac/UsbEventWatcher.Mac.c -o x64/GitHub/UsbEventWatcher.Mac.dylib -framework CoreFoundation -framework DiskArbitration -framework IOKit

      - name: Upload macOS .dylib files as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: UsbEventWatcher-Mac-dylib
          path: |
            Usb.Events/x64/GitHub/UsbEventWatcher.Mac.dylib
            Usb.Events/arm64/GitHub/UsbEventWatcher.Mac.dylib

  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create output directories
        run: |
          mkdir -p Usb.Events/x64/GitHub
          mkdir -p Usb.Events/x86/GitHub

      - name: Install build essentials and 32/64-bit udev libraries
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y build-essential
          sudo apt-get install -y libudev-dev:i386 libudev-dev:amd64
          sudo apt-get install -y gcc-multilib

      - name: Compile the .c file to .so for x64
        run: |
          cd Usb.Events
          gcc -shared ./Linux/UsbEventWatcher.Linux.c -o x64/GitHub/UsbEventWatcher.Linux.so -ludev -fPIC

      - name: Compile the .c file to .so for x86
        run: |
          cd Usb.Events
          gcc -m32 -shared ./Linux/UsbEventWatcher.Linux.c -o x86/GitHub/UsbEventWatcher.Linux.so -ludev -fPIC

      - name: Upload Linux .so files as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: UsbEventWatcher-Linux-so
          path: |
            Usb.Events/x64/GitHub/UsbEventWatcher.Linux.so
            Usb.Events/x86/GitHub/UsbEventWatcher.Linux.so

  build-arm:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create output directories
        run: |
          mkdir -p Usb.Events/arm/GitHub
          mkdir -p Usb.Events/arm64/GitHub

      - name: Set up QEMU for multi-platform builds
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm/v7, arm64/v8

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build ARM Docker image
        run: |
          echo "Building ARM Docker image..."
          cd Usb.Events
          docker buildx build --platform linux/arm/v7 -f Dockerfile.arm -t usb-event-arm --output type=local,dest=arm/GitHub .
          echo "Contents of arm/GitHub:"
          ls -l arm/GitHub

      - name: Build ARM64 Docker image
        run: |
          echo "Building ARM64 Docker image..."
          cd Usb.Events
          docker buildx build --platform linux/arm64/v8 -f Dockerfile.arm64 -t usb-event-arm64 --output type=local,dest=arm64/GitHub .
          echo "Contents of arm64/GitHub:"
          ls -l arm64/GitHub

      - name: Verify directory structure
        run: |
          echo "Verifying directory structure..."
          ls -l Usb.Events
          ls -l Usb.Events/arm
          ls -l Usb.Events/arm64
          ls -l Usb.Events/arm/GitHub
          ls -l Usb.Events/arm64/GitHub

      - name: Upload ARM .so file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: UsbEventWatcher-ARM-so
          path: |
            Usb.Events/arm/GitHub/UsbEventWatcher.Linux.so
            Usb.Events/arm64/GitHub/UsbEventWatcher.Linux.so

  pack-nuget:
    runs-on: windows-latest

    needs: [build-macos, build-linux, build-arm]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Download macOS .dylib artifact
        uses: actions/download-artifact@v4
        with:
          name: UsbEventWatcher-Mac-dylib
          path: Usb.Events

      - name: Download Linux .so artifact
        uses: actions/download-artifact@v4
        with:
          name: UsbEventWatcher-Linux-so
          path: Usb.Events

      - name: Download ARM .so artifact
        uses: actions/download-artifact@v4
        with:
          name: UsbEventWatcher-ARM-so
          path: Usb.Events

      - name: Restore dependencies
        run: dotnet restore Usb.Events/Usb.Events.csproj

      - name: Pack the project with RunBuildTargets set to false and LibFolder set to GitHub
        run: dotnet pack Usb.Events/Usb.Events.csproj --configuration Release --output ./nupkg /p:RunBuildTargets=false /p:LibFolder=GitHub

      - name: Upload NuGet package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: UsbEventWatcher-NuGet
          path: ./nupkg/*.nupkg
