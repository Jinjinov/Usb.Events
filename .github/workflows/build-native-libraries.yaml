name: Build native libraries

on:
  workflow_dispatch:  # Trigger manually

jobs:
  build-macos:
    runs-on: macos-latest  # Use macOS runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create output directory
        run: mkdir -p Usb.Events/x64/Release  # Create the directory if it doesn't exist

      - name: Compile the .c file to .dylib
        run: |
          cd Usb.Events
          gcc -shared ./Mac/UsbEventWatcher.Mac.c -o x64/Release/UsbEventWatcher.Mac.dylib -framework CoreFoundation -framework DiskArbitration -framework IOKit

      - name: Upload macOS .dylib file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: UsbEventWatcher-Mac-dylib
          path: Usb.Events/x64/Release/UsbEventWatcher.Mac.dylib

  build-linux:
    runs-on: ubuntu-latest  # Use Ubuntu runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create output directories
        run: |
          mkdir -p Usb.Events/x64/Release  # Create the x64 output directory if it doesn't exist
          mkdir -p Usb.Events/x86/Release  # Create the x86 output directory if it doesn't exist
          
      - name: Install build essentials and 32/64-bit udev libraries
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y build-essential
          sudo apt-get install -y libudev-dev:i386 libudev-dev:amd64
          sudo apt-get install -y gcc-multilib

      - name: Compile the .c file to .so for x64
        run: |
          cd Usb.Events
          gcc -shared ./Linux/UsbEventWatcher.Linux.c -o x64/Release/UsbEventWatcher.Linux.so -ludev -fPIC

      - name: Compile the .c file to .so for x86
        run: |
          cd Usb.Events
          gcc -m32 -shared ./Linux/UsbEventWatcher.Linux.c -o x86/Release/UsbEventWatcher.Linux.so -ludev -fPIC

      - name: Upload Linux .so files as artifact
        uses: actions/upload-artifact@v4
        with:
          name: UsbEventWatcher-Linux-so
          path: |
            Usb.Events/x64/Release/UsbEventWatcher.Linux.so
            Usb.Events/x86/Release/UsbEventWatcher.Linux.so

  pack-nuget:
    runs-on: windows-latest  # Use Windows runner for packing

    needs: [build-macos, build-linux]  # Ensure the builds for macOS and Linux are completed first

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Restore dependencies
        run: dotnet restore Usb.Events/Usb.Events.csproj

      - name: Pack the project with RunBuildTargets set to false and LibFolder set to GitHub
        run: dotnet pack Usb.Events/Usb.Events.csproj --configuration Release --output ./nupkg /p:RunBuildTargets=false /p:LibFolder=GitHub

      - name: Upload NuGet package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: UsbEventWatcher-NuGet
          path: ./nupkg/*.nupkg
