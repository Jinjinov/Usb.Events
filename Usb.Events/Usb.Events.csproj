<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <LangVersion>8.0</LangVersion>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <PropertyGroup>
    <Product>Usb.Events</Product>
    <PackageId>Usb.Events</PackageId>
    <PackageVersion>11.1.0.1</PackageVersion>
    <Version>11.1.0.1</Version>
    <Authors>Jinjinov</Authors>
    <Description>Subscribe to events to be notified when a USB drive is mounted in or ejected, or
      when a USB device is added or removed. Usb.Events is a .NET Standard 2.0 library and uses WMI
      on Windows, libudev on Linux and IOKit on macOS.</Description>
    <Copyright>Copyright (c) Jinjinov 2022</Copyright>
    <PackageProjectUrl>https://github.com/Jinjinov/Usb.Events</PackageProjectUrl>
    <!--<PackageIcon></PackageIcon>-->
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <RepositoryUrl>https://github.com/Jinjinov/Usb.Events.git</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageTags>USB;Event;Insert;Remove;NET Standard;Windows;Linux;macOS</PackageTags>
    <!--<PackageReleaseNotes></PackageReleaseNotes>-->
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <SignAssembly>True</SignAssembly>
    <AssemblyOriginatorKeyFile>UsbEvents.snk</AssemblyOriginatorKeyFile>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
  </PropertyGroup>

  <ItemGroup>
    <None Include="..\README.md">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="System.Management" Version="8.0.0" />
  </ItemGroup>

  <Target Name="CheckArchitecture" BeforeTargets="Build">
    <PropertyGroup>
      <IsOs32Bit Condition="'$([System.Environment]::Is64BitOperatingSystem)' == 'false'">true</IsOs32Bit>
      <IsOs64Bit Condition="'$([System.Environment]::Is64BitOperatingSystem)' == 'true'">true</IsOs64Bit>
      <IsProcess32Bit Condition="'$([System.Environment]::Is64BitProcess)' == 'false'">true</IsProcess32Bit>
      <IsProcess64Bit Condition="'$([System.Environment]::Is64BitProcess)' == 'true'">true</IsProcess64Bit>
      <IsCpu32Bit
        Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture)' == 'X86' or '$([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture)' == 'Arm'">
        true</IsCpu32Bit>
      <IsCpu64Bit
        Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture)' == 'X64' or '$([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture)' == 'Arm64'">
        true</IsCpu64Bit>
      <IsCpuIntel
        Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture)' == 'X86' or '$([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture)' == 'X64'">
        true</IsCpuIntel>
      <IsCpuArm
        Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture)' == 'Arm' or '$([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture)' == 'Arm64'">
        true</IsCpuArm>
      <IsOsWindows
        Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Windows)))'">
        true</IsOsWindows>
      <IsOsLinux
        Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))'">
        true</IsOsLinux>
      <IsOsMacOS
        Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::OSX)))'">
        true</IsOsMacOS>
    </PropertyGroup>

    <Message Importance="High" Text="Is OS 32-bit: $(IsOs32Bit)" />
    <Message Importance="High" Text="Is OS 64-bit: $(IsOs64Bit)" />
    <Message Importance="High" Text="Is Process 32-bit: $(IsProcess32Bit)" />
    <Message Importance="High" Text="Is Process 64-bit: $(IsProcess64Bit)" />
    <Message Importance="High" Text="Is CPU 32-bit: $(IsCpu32Bit)" />
    <Message Importance="High" Text="Is CPU 64-bit: $(IsCpu64Bit)" />
    <Message Importance="High" Text="Is CPU Intel: $(IsCpuIntel)" />
    <Message Importance="High" Text="Is CPU ARM: $(IsCpuArm)" />
    <Message Importance="High" Text="Is OS Windows: $(IsOsWindows)" />
    <Message Importance="High" Text="Is OS Linux: $(IsOsLinux)" />
    <Message Importance="High" Text="Is OS macOS: $(IsOsMacOS)" />
  </Target>

  <Target Name="BuildNative" Condition="'$(OS)' != 'Windows_NT'" BeforeTargets="Build">

    <MakeDir Directories="x86/$(Configuration);x64/$(Configuration)" />

    <PropertyGroup Condition="'$(Configuration)' == 'Debug'">
      <Flags>-shared -g -D DEBUG</Flags>
    </PropertyGroup>
    <PropertyGroup Condition="'$(Configuration)' == 'Release'">
      <Flags>-shared</Flags>
    </PropertyGroup>

    <Exec Command="getconf LONG_BIT" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="LongBit" />
    </Exec>

    <Exec Command="arch" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="Arch" />
    </Exec>

    <PropertyGroup>
      <IsIntel
        Condition="'$(Arch)' == 'i386' or '$(Arch)' == 'x86_64' or '$(Arch)' == 'i686' or '$(Arch)' == 'amd64'">
        true</IsIntel>
      <IsArm
        Condition="'$(Arch)' == 'arm' or '$(Arch)' == 'arm64' or '$(Arch)' == 'armv6l' or '$(Arch)' == 'armv7l' or '$(Arch)' == 'armv8l' or '$(Arch)' == 'aarch64'">
        true</IsArm>
      <Is32Bit
        Condition="'$(Arch)' == 'i386' or '$(Arch)' == 'i686' or '$(Arch)' == 'arm' or '$(Arch)' == 'armv6l' or '$(Arch)' == 'armv7l'">
        true</Is32Bit>
      <Is64Bit
        Condition="'$(Arch)' == 'x86_64' or '$(Arch)' == 'amd64' or '$(Arch)' == 'arm64' or '$(Arch)' == 'armv8l' or '$(Arch)' == 'aarch64'">
        true</Is64Bit>
    </PropertyGroup>

    <!-- Intel 32 bit -->

    <Exec
      Condition="$([MSBuild]::IsOSPlatform('OSX')) And ('$(LongBit)' == '32') And ('$(IsIntel)' == 'true')"
      WorkingDirectory=".\"
      Command="gcc $(Flags) -m32 ./Mac/UsbEventWatcher.Mac.c -o ./x86/$(Configuration)/UsbEventWatcher.Mac.dylib -framework CoreFoundation -framework DiskArbitration -framework IOKit" />

    <Exec Condition="$([MSBuild]::IsOSPlatform('Linux')) And ('$(IsIntel)' == 'true')"
      WorkingDirectory=".\"
      Command="gcc $(Flags) -m32 ./Linux-libudev/UsbEventWatcher.Linux.c -o ./x86/$(Configuration)/UsbEventWatcher.Linux.so -ludev -fPIC" />

    <!-- Intel 64 bit -->

    <Exec
      Condition="$([MSBuild]::IsOSPlatform('OSX')) And ('$(LongBit)' == '64') And ('$(IsIntel)' == 'true')"
      WorkingDirectory=".\"
      Command="gcc $(Flags) -m64 ./Mac/UsbEventWatcher.Mac.c -o ./x64/$(Configuration)/UsbEventWatcher.Mac.dylib -framework CoreFoundation -framework DiskArbitration -framework IOKit" />

    <Exec
      Condition="$([MSBuild]::IsOSPlatform('Linux')) And ('$(LongBit)' == '64') And ('$(IsIntel)' == 'true')"
      WorkingDirectory=".\"
      Command="gcc $(Flags) -m64 ./Linux-libudev/UsbEventWatcher.Linux.c -o ./x64/$(Configuration)/UsbEventWatcher.Linux.so -ludev -fPIC" />

    <!-- Arm 32 bit -->

    <Exec
      Condition="$([MSBuild]::IsOSPlatform('OSX')) And ('$(LongBit)' == '32') And ('$(IsArm)' == 'true')"
      WorkingDirectory=".\"
      Command="gcc $(Flags) -march=armv7-a+fp ./Mac/UsbEventWatcher.Mac.c -o ./arm/$(Configuration)/UsbEventWatcher.Mac.dylib -framework CoreFoundation -framework DiskArbitration -framework IOKit" />

    <Exec
      Condition="$([MSBuild]::IsOSPlatform('Linux')) And ('$(LongBit)' == '32') And ('$(IsArm)' == 'true')"
      WorkingDirectory=".\"
      Command="gcc $(Flags) -march=armv7-a+fp ./Linux-libudev/UsbEventWatcher.Linux.c -o ./arm/$(Configuration)/UsbEventWatcher.Linux.so -ludev -fPIC" />

    <!-- Arm 64 bit -->

    <Exec
      Condition="$([MSBuild]::IsOSPlatform('OSX')) And ('$(LongBit)' == '64') And ('$(IsArm)' == 'true')"
      WorkingDirectory=".\"
      Command="gcc $(Flags) -march=armv8-a ./Mac/UsbEventWatcher.Mac.c -o ./arm64/$(Configuration)/UsbEventWatcher.Mac.dylib -framework CoreFoundation -framework DiskArbitration -framework IOKit" />

    <Exec
      Condition="$([MSBuild]::IsOSPlatform('Linux')) And ('$(LongBit)' == '64') And ('$(IsArm)' == 'true')"
      WorkingDirectory=".\"
      Command="gcc $(Flags) -march=armv8-a ./Linux-libudev/UsbEventWatcher.Linux.c -o ./arm64/$(Configuration)/UsbEventWatcher.Linux.so -ludev -fPIC" />
  </Target>

  <Target Name="BuildNativeArm" Condition="'$(OS)' == 'Windows_NT'" BeforeTargets="Build">

    <Exec Command="docker version --format '{{.Server.Version}}'" ConsoleToMSBuild="true"
      IgnoreExitCode="true" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="DockerExitCode" />
      <Output TaskParameter="ConsoleOutput" PropertyName="DockerVersion" />
    </Exec>

    <PropertyGroup>
      <DockerInstalled Condition="'$(DockerExitCode)' == '0'">true</DockerInstalled>
    </PropertyGroup>

    <Message Condition="'$(DockerInstalled)' == 'true'" Importance="High"
      Text="Docker Installed: $(DockerVersion)" />
    <Message Condition="'$(DockerInstalled)' != 'true'" Importance="High"
      Text="Docker Not Installed" />

    <MakeDir Directories="arm/$(Configuration);arm64/$(Configuration)" />

    <PropertyGroup>
      <DockerImageArm>usb-event-watcher-image-arm</DockerImageArm>
      <DockerContainerArm>usb-event-watcher-container-arm</DockerContainerArm>
      <DockerImageArm64>usb-event-watcher-image-arm64</DockerImageArm64>
      <DockerContainerArm64>usb-event-watcher-container-arm64</DockerContainerArm64>
    </PropertyGroup>

    <!-- Build and run the Docker container for arm -->

    <Exec Condition="'$(DockerInstalled)' == 'true'"
      WorkingDirectory=".\"
      Command="docker build -t $(DockerImageArm) -f Dockerfile.arm ." />

    <Exec Condition="'$(DockerInstalled)' == 'true'"
      WorkingDirectory=".\"
      Command="docker run --name $(DockerContainerArm) $(DockerImageArm) arm $(Configuration)" />

    <Exec Condition="'$(DockerInstalled)' == 'true'"
      WorkingDirectory=".\"
      Command="docker cp $(DockerContainerArm):UsbEventWatcher.Linux.so ./arm/$(Configuration)/UsbEventWatcher.Linux.so" />

    <Exec Condition="'$(DockerInstalled)' == 'true'"
      WorkingDirectory=".\"
      Command="docker stop $(DockerContainerArm)" />

    <Exec Condition="'$(DockerInstalled)' == 'true'"
      WorkingDirectory=".\"
      Command="docker rm $(DockerContainerArm)" />

    <!-- Build and run the Docker container for arm64 -->

    <Exec Condition="'$(DockerInstalled)' == 'true'"
      WorkingDirectory=".\"
      Command="docker build -t $(DockerImageArm64) -f Dockerfile.arm64 ." />

    <Exec Condition="'$(DockerInstalled)' == 'true'"
      WorkingDirectory=".\"
      Command="docker run --name $(DockerContainerArm64) $(DockerImageArm64) arm64 $(Configuration)" />

    <Exec Condition="'$(DockerInstalled)' == 'true'"
      WorkingDirectory=".\"
      Command="docker cp $(DockerContainerArm64):UsbEventWatcher.Linux.so ./arm64/$(Configuration)/UsbEventWatcher.Linux.so" />

    <Exec Condition="'$(DockerInstalled)' == 'true'"
      WorkingDirectory=".\"
      Command="docker stop $(DockerContainerArm64)" />

    <Exec Condition="'$(DockerInstalled)' == 'true'"
      WorkingDirectory=".\"
      Command="docker rm $(DockerContainerArm64)" />

  </Target>

  <ItemGroup>

    <!-- Intel 32 bit -->

    <None Include="./x86/$(Configuration)/UsbEventWatcher.Mac.dylib"
      Condition="Exists('./x86/$(Configuration)/UsbEventWatcher.Mac.dylib')">
      <Pack>true</Pack>
      <PackagePath>runtimes\osx-x86\native</PackagePath>
      <CopyToOutputDirectory Condition="!$([System.Environment]::Is64BitOperatingSystem)">
        PreserveNewest</CopyToOutputDirectory>
      <Link>UsbEventWatcher.Mac.dylib</Link>
    </None>

    <None Include="./x86/$(Configuration)/UsbEventWatcher.Linux.so"
      Condition="Exists('./x86/$(Configuration)/UsbEventWatcher.Linux.so')">
      <Pack>true</Pack>
      <PackagePath>runtimes\linux-x86\native</PackagePath>
      <CopyToOutputDirectory Condition="!$([System.Environment]::Is64BitOperatingSystem)">
        PreserveNewest</CopyToOutputDirectory>
      <Link>UsbEventWatcher.Linux.so</Link>
    </None>

    <!-- Intel 64 bit -->

    <None Include="./x64/$(Configuration)/UsbEventWatcher.Mac.dylib"
      Condition="Exists('./x64/$(Configuration)/UsbEventWatcher.Mac.dylib')">
      <Pack>true</Pack>
      <PackagePath>runtimes\osx-x64\native</PackagePath>
      <CopyToOutputDirectory Condition="$([System.Environment]::Is64BitOperatingSystem)">
        PreserveNewest</CopyToOutputDirectory>
      <Link>UsbEventWatcher.Mac.dylib</Link>
    </None>

    <None Include="./x64/$(Configuration)/UsbEventWatcher.Linux.so"
      Condition="Exists('./x64/$(Configuration)/UsbEventWatcher.Linux.so')">
      <Pack>true</Pack>
      <PackagePath>runtimes\linux-x64\native</PackagePath>
      <CopyToOutputDirectory Condition="$([System.Environment]::Is64BitOperatingSystem)">
        PreserveNewest</CopyToOutputDirectory>
      <Link>UsbEventWatcher.Linux.so</Link>
    </None>

    <!-- Arm 32 bit -->

    <None Include="./arm/$(Configuration)/UsbEventWatcher.Mac.dylib"
      Condition="Exists('./arm/$(Configuration)/UsbEventWatcher.Mac.dylib')">
      <Pack>true</Pack>
      <PackagePath>runtimes\osx-arm\native</PackagePath>
      <CopyToOutputDirectory Condition="!$([System.Environment]::Is64BitOperatingSystem)">
        PreserveNewest</CopyToOutputDirectory>
      <Link>UsbEventWatcher.Mac.dylib</Link>
    </None>

    <None Include="./arm/$(Configuration)/UsbEventWatcher.Linux.so"
      Condition="Exists('./arm/$(Configuration)/UsbEventWatcher.Linux.so')">
      <Pack>true</Pack>
      <PackagePath>runtimes\linux-arm\native</PackagePath>
      <CopyToOutputDirectory Condition="!$([System.Environment]::Is64BitOperatingSystem)">
        PreserveNewest</CopyToOutputDirectory>
      <Link>UsbEventWatcher.Linux.so</Link>
    </None>

    <!-- Arm 64 bit -->

    <None Include="./arm64/$(Configuration)/UsbEventWatcher.Mac.dylib"
      Condition="Exists('./arm64/$(Configuration)/UsbEventWatcher.Mac.dylib')">
      <Pack>true</Pack>
      <PackagePath>runtimes\osx-arm64\native</PackagePath>
      <CopyToOutputDirectory Condition="$([System.Environment]::Is64BitOperatingSystem)">
        PreserveNewest</CopyToOutputDirectory>
      <Link>UsbEventWatcher.Mac.dylib</Link>
    </None>

    <None Include="./arm64/$(Configuration)/UsbEventWatcher.Linux.so"
      Condition="Exists('./arm64/$(Configuration)/UsbEventWatcher.Linux.so')">
      <Pack>true</Pack>
      <PackagePath>runtimes\linux-arm64\native</PackagePath>
      <CopyToOutputDirectory Condition="$([System.Environment]::Is64BitOperatingSystem)">
        PreserveNewest</CopyToOutputDirectory>
      <Link>UsbEventWatcher.Linux.so</Link>
    </None>

  </ItemGroup>

</Project>